import csv
import random
from datetime import datetime, timedelta

# Configuration commune
start_date = datetime.now() - timedelta(days=180)
nb_records = 500

print("üöÄ G√©n√©ration de tous les fichiers CSV...")
print("="*60)

# ============================================================================
# 1. TICKETS JIRA (IT INTERNE)
# ============================================================================

departements_it = [
    "Souscription",
    "Sinistres",
    "Service Client",
    "Comptabilit√©",
    "Ressources Humaines",
    "IT",
    "Commercial",
    "Direction",
    "Juridique",
    "Actuariat",
    "Marketing",
    "Recouvrement"
]

problemes = [
    {
        "resume": "Probl√®me de r√©ception d'emails sur t√©l√©phone",
        "description": "Impossible de recevoir mes emails professionnels sur mon iPhone. La synchronisation ne fonctionne plus depuis ce matin."
    },
    {
        "resume": "Impossibilit√© de se connecter au VPN",
        "description": "Le client VPN affiche une erreur 'Authentification √©chou√©e' alors que mes identifiants sont corrects."
    },
    {
        "resume": "Acc√®s bloqu√© √† l'application de gestion des sinistres",
        "description": "Message d'erreur 'Acc√®s refus√©' lors de la tentative de connexion √† SINISTRA. Besoin d'un acc√®s urgent."
    },
    {
        "resume": "Imprimante du 3√®me √©tage hors service",
        "description": "L'imprimante Canon du service sinistres affiche un message d'erreur et ne r√©pond plus."
    },
    {
        "resume": "Lenteur importante sur l'application m√©tier",
        "description": "L'application de souscription est extr√™mement lente depuis 2 jours. Les temps de chargement d√©passent 30 secondes."
    },
    {
        "resume": "Mot de passe expir√© - demande de r√©initialisation",
        "description": "Mon mot de passe Active Directory a expir√© et je n'arrive pas √† le r√©initialiser via le portail self-service."
    },
    {
        "resume": "Probl√®me de connexion au r√©seau WiFi",
        "description": "Impossible de se connecter au WiFi d'entreprise. Le r√©seau est visible mais l'authentification √©choue."
    },
    {
        "resume": "Logiciel Excel qui plante r√©guli√®rement",
        "description": "Excel se ferme automatiquement toutes les heures avec un message d'erreur. Perte de donn√©es non sauvegard√©es."
    },
    {
        "resume": "Demande d'installation de logiciel",
        "description": "Besoin d'installer Adobe Acrobat Pro pour la signature √©lectronique des contrats."
    },
    {
        "resume": "Probl√®me d'acc√®s au lecteur r√©seau partag√©",
        "description": "Le lecteur Z: (serveur FILESERVER01) n'est plus accessible. Message 'Chemin r√©seau introuvable'."
    },
    {
        "resume": "T√©l√©phone fixe sans tonalit√©",
        "description": "Mon poste t√©l√©phonique ne fonctionne plus. Pas de tonalit√© et impossible de passer/recevoir des appels."
    },
    {
        "resume": "Probl√®me d'envoi d'emails avec pi√®ces jointes",
        "description": "Impossible d'envoyer des emails avec des pi√®ces jointes sup√©rieures √† 5 Mo. Message d'erreur syst√©matique."
    },
    {
        "resume": "Demande de cr√©ation de compte utilisateur",
        "description": "Nouveau collaborateur arriv√© ce matin. Besoin de cr√©er son compte AD et ses acc√®s aux applications m√©tier."
    },
    {
        "resume": "√âcran qui scintille - probl√®me mat√©riel",
        "description": "Mon √©cran Dell pr√©sente des scintillements constants. Cela devient difficile de travailler."
    },
    {
        "resume": "Clavier d√©fectueux - touches qui ne r√©pondent pas",
        "description": "Plusieurs touches du clavier (E, R, T) ne fonctionnent plus correctement. Besoin d'un remplacement."
    },
    {
        "resume": "Acc√®s refus√© au dossier partag√© Comptabilit√©",
        "description": "Message 'Vous n'avez pas les autorisations n√©cessaires' lors de l'acc√®s au dossier \\\\COMPTA\\Factures."
    },
    {
        "resume": "Probl√®me de webcam pour les visioconf√©rences",
        "description": "Ma webcam n'est pas d√©tect√©e par Teams. Impossible de participer aux r√©unions vid√©o."
    },
    {
        "resume": "Logiciel de gestion commerciale qui freeze",
        "description": "L'application CRM se fige r√©guli√®rement et n√©cessite un red√©marrage forc√©."
    },
    {
        "resume": "Demande d'augmentation de droits sur application",
        "description": "Besoin d'obtenir les droits administrateur sur l'application de tarification pour valider les devis."
    },
    {
        "resume": "Ordinateur portable tr√®s lent au d√©marrage",
        "description": "Mon PC met plus de 10 minutes √† d√©marrer compl√®tement. Performances d√©grad√©es."
    },
    {
        "resume": "Probl√®me de synchronisation OneDrive",
        "description": "OneDrive indique 'Synchronisation en attente' depuis 48h. Les fichiers ne se synchronisent plus."
    },
    {
        "resume": "Impossible d'imprimer en recto-verso",
        "description": "L'option recto-verso n'appara√Æt plus dans les param√®tres d'impression."
    },
    {
        "resume": "Badge d'acc√®s d√©sactiv√©",
        "description": "Mon badge ne fonctionne plus pour acc√©der au b√¢timent. Refus√© √† tous les lecteurs."
    },
    {
        "resume": "Erreur lors de la sauvegarde sur serveur",
        "description": "Impossible de sauvegarder mes documents sur le serveur. Message 'Espace disque insuffisant'."
    },
    {
        "resume": "Demande de suppression de compte utilisateur",
        "description": "Collaborateur parti. Besoin de d√©sactiver son compte et transf√©rer ses donn√©es."
    },
    {
        "resume": "Probl√®me de son lors des visioconf√©rences",
        "description": "Les participants n'entendent pas ma voix lors des appels Teams. Le micro semble ne pas fonctionner."
    },
    {
        "resume": "Application mobile professionnelle qui crash",
        "description": "L'application mobile de gestion des sinistres se ferme automatiquement au d√©marrage."
    },
    {
        "resume": "Souris sans fil qui ne r√©pond plus",
        "description": "La souris Bluetooth se d√©connecte r√©guli√®rement. N√©cessite un red√©marrage du PC."
    },
    {
        "resume": "Demande de licence Office suppl√©mentaire",
        "description": "Besoin d'une licence Microsoft Office pour le nouveau stagiaire du service comptabilit√©."
    },
    {
        "resume": "Probl√®me d'affichage de caract√®res sp√©ciaux",
        "description": "Les accents et caract√®res sp√©ciaux s'affichent mal dans certaines applications."
    },
    {
        "resume": "Scanner qui ne fonctionne plus",
        "description": "Le scanner du service courrier ne num√©rise plus les documents. Voyant rouge allum√©."
    },
    {
        "resume": "Probl√®me de connexion √† l'intranet",
        "description": "Impossible d'acc√©der √† l'intranet de l'entreprise. Page blanche lors du chargement."
    },
    {
        "resume": "Demande de changement de mot de passe messagerie",
        "description": "Suspicion de compromission du compte email. Demande de r√©initialisation imm√©diate."
    },
    {
        "resume": "Erreur lors de l'ouverture de fichiers PDF",
        "description": "Adobe Reader affiche 'Le fichier est endommag√©' pour tous les PDFs re√ßus aujourd'hui."
    },
    {
        "resume": "Probl√®me de partage d'√©cran sur Teams",
        "description": "Impossible de partager mon √©cran lors des r√©unions. Option gris√©e dans Teams."
    },
    {
        "resume": "Disque dur externe non reconnu",
        "description": "Le disque dur USB de sauvegarde n'est plus d√©tect√© par Windows."
    },
    {
        "resume": "Probl√®me de certification √©lectronique",
        "description": "Ma signature √©lectronique a expir√©. Besoin de renouveler le certificat."
    },
    {
        "resume": "Application de tarification qui ne se lance pas",
        "description": "Message d'erreur 'DLL manquante' au lancement de l'outil de calcul des primes."
    },
    {
        "resume": "Demande de transfert de poste t√©l√©phonique",
        "description": "Changement de bureau. Besoin de transf√©rer mon num√©ro de poste vers le bureau 3.12."
    },
    {
        "resume": "Probl√®me de messagerie instantan√©e",
        "description": "Teams indique 'Hors ligne' en permanence alors que j'ai une connexion internet."
    }
]

tickets = []
for i in range(1, nb_records + 1):
    probleme = random.choice(problemes)
    random_days = random.randint(0, 180)
    creation_date = start_date + timedelta(days=random_days)

    ticket = {
        "ticket_id": f"JIRA-{i:04d}",
        "resume": probleme["resume"],
        "description": probleme["description"],
        "creation_date": creation_date.strftime("%Y-%m-%d %H:%M:%S"),
        "departement": random.choice(departements_it)
    }
    tickets.append(ticket)

tickets.sort(key=lambda x: x["creation_date"])

with open('data/tickets_jira.csv', 'w', newline='', encoding='utf-8') as f:
    fieldnames = ['ticket_id', 'resume', 'description', 'creation_date', 'departement']
    writer = csv.DictWriter(f, fieldnames=fieldnames)
    writer.writeheader()
    writer.writerows(tickets)

print("‚úÖ tickets_jira.csv g√©n√©r√©")

# ============================================================================
# 2. REMBOURSEMENTS SINISTRES
# ============================================================================

types_sinistre = [
    "Auto - Accident responsable",
    "Auto - Accident non-responsable",
    "Auto - Bris de glace",
    "Auto - Vol",
    "Auto - Incendie",
    "Habitation - D√©g√¢t des eaux",
    "Habitation - Vol",
    "Habitation - Incendie",
    "Habitation - Catastrophe naturelle",
    "Habitation - Bris de glace",
    "Sant√© - Hospitalisation",
    "Sant√© - Soins dentaires",
    "Sant√© - Optique",
    "Sant√© - Consultation sp√©cialiste",
    "Sant√© - M√©dicaments",
    "Responsabilit√© civile",
    "Assistance juridique",
    "Protection juridique"
]

statuts = [
    "En attente de pi√®ces",
    "En cours d'instruction",
    "Valid√© - En attente de paiement",
    "Rembours√©",
    "Rembours√© partiellement",
    "Rejet√© - Franchise non atteinte",
    "Rejet√© - Hors garantie",
    "Rejet√© - Exclusion contractuelle",
    "En attente d'expertise",
    "Compl√©ment d'information requis"
]

commentaires = [
    "Dossier complet, traitement en cours",
    "Documents manquants : devis de r√©paration",
    "Attente rapport d'expertise",
    "Franchise de 150‚Ç¨ appliqu√©e",
    "Remboursement selon bar√®me conventionnel",
    "Plafond annuel atteint",
    "Garantie optionnelle non souscrite",
    "Sinistre d√©clar√© hors d√©lai",
    "Factures conformes, validation OK",
    "R√©clamation client en cours",
    "Compl√©ment d'information demand√© par email",
    "RIB en attente",
    "Virement effectu√© le {date}",
    "Accord amiable trouv√©",
    "Contentieux en cours avec tiers",
    "Expert mandat√© - Rendez-vous fix√©",
    "Ticket support cr√©√©: JIRA-{num}",
    "Client contact√© pour pr√©cisions",
    "Proc√©dure acc√©l√©r√©e appliqu√©e",
    "Dossier prioritaire - sinistre majeur"
]

departements_sinistres = [
    "Sinistres Auto",
    "Sinistres Habitation",
    "Sinistres Sant√©",
    "Service Indemnisation",
    "Service Expertise",
    "Service Juridique"
]

remboursements = []
for i in range(1, nb_records + 1):
    random_days = random.randint(0, 180)
    date_declaration = start_date + timedelta(days=random_days)
    type_sinistre = random.choice(types_sinistre)

    if "Auto" in type_sinistre:
        montant_reclame = round(random.uniform(500, 15000), 2)
    elif "Habitation" in type_sinistre:
        montant_reclame = round(random.uniform(300, 25000), 2)
    elif "Sant√©" in type_sinistre:
        montant_reclame = round(random.uniform(50, 5000), 2)
    else:
        montant_reclame = round(random.uniform(200, 10000), 2)

    statut = random.choice(statuts)

    if "Rembours√©" in statut and "partiellement" not in statut:
        franchise = random.choice([0, 150, 200, 300, 500])
        montant_rembourse = round(max(0, montant_reclame - franchise), 2)
    elif "partiellement" in statut:
        montant_rembourse = round(montant_reclame * random.uniform(0.6, 0.9), 2)
    elif "Rejet√©" in statut:
        montant_rembourse = 0.00
    else:
        montant_rembourse = 0.00

    if "Rembours√©" in statut:
        delai_traitement = random.randint(5, 45)
        date_remboursement = date_declaration + timedelta(days=delai_traitement)
        date_remboursement_str = date_remboursement.strftime("%Y-%m-%d")
    else:
        date_remboursement_str = ""

    if "Auto" in type_sinistre:
        departement = "Sinistres Auto"
    elif "Habitation" in type_sinistre:
        departement = "Sinistres Habitation"
    elif "Sant√©" in type_sinistre:
        departement = "Sinistres Sant√©"
    else:
        departement = random.choice(["Service Indemnisation", "Service Expertise", "Service Juridique"])

    commentaire = random.choice(commentaires)
    if "{date}" in commentaire:
        commentaire = commentaire.replace("{date}", date_remboursement_str if date_remboursement_str else "√† venir")
    if "{num}" in commentaire:
        jira_num = random.randint(1, 500)
        commentaire = commentaire.replace("{num}", f"{jira_num:04d}")

    remboursement = {
        "sinistre_id": f"SIN-{i:05d}",
        "client_id": f"CLI-{random.randint(10000, 99999)}",
        "date_declaration": date_declaration.strftime("%Y-%m-%d"),
        "date_remboursement": date_remboursement_str,
        "type_sinistre": type_sinistre,
        "montant_reclame": f"{montant_reclame:.2f}",
        "montant_rembourse": f"{montant_rembourse:.2f}",
        "statut": statut,
        "departement": departement,
        "commentaire": commentaire
    }
    remboursements.append(remboursement)

remboursements.sort(key=lambda x: x["date_declaration"])

with open('data/myfeelback_remboursements.csv', 'w', newline='', encoding='utf-8') as f:
    fieldnames = [
        'sinistre_id', 'client_id', 'date_declaration', 'date_remboursement',
        'type_sinistre', 'montant_reclame', 'montant_rembourse', 'statut',
        'departement', 'commentaire'
    ]
    writer = csv.DictWriter(f, fieldnames=fieldnames)
    writer.writeheader()
    writer.writerows(remboursements)

print("‚úÖ myfeelback_remboursements.csv g√©n√©r√©")

# ============================================================================
# 3. FEEDBACK SOUSCRIPTIONS
# ============================================================================

types_contrat = [
    "Auto - Au tiers", "Auto - Tous risques", "Auto - Interm√©diaire",
    "Habitation - Propri√©taire", "Habitation - Locataire", "Habitation - R√©sidence secondaire",
    "Sant√© - Individuelle", "Sant√© - Famille", "Sant√© - S√©nior",
    "Vie - D√©c√®s", "Vie - √âpargne", "Protection juridique",
    "Responsabilit√© civile", "Assurance emprunteur"
]

canaux_souscription = ["En ligne", "T√©l√©phone", "Agence", "Courtier", "Application mobile"]

commentaires_positifs_souscription = [
    "Processus tr√®s fluide et rapide", "Conseiller tr√®s professionnel et √† l'√©coute",
    "Documentation claire et compl√®te", "Prix comp√©titif", "Souscription en ligne tr√®s intuitive",
    "Excellent accueil en agence", "R√©ponse rapide √† mes questions", "Je recommande vivement",
    "Simplicit√© du parcours digital", "Conseiller patient et p√©dagogue"
]

commentaires_negatifs_souscription = [
    "Processus trop long et complexe", "Manque d'informations claires sur les garanties",
    "Prix plus √©lev√© que la concurrence", "Difficult√©s techniques sur le site web",
    "D√©lai de traitement du dossier trop long", "Conseiller peu disponible",
    "Formulaire en ligne compliqu√©", "Pi√®ces justificatives demand√©es excessives",
    "Pas assez d'explications sur les exclusions", "Attente t√©l√©phonique trop longue"
]

souscriptions = []
for i in range(1, nb_records + 1):
    random_days = random.randint(0, 180)
    date_feedback = start_date + timedelta(days=random_days)
    note_globale = random.choices([1, 2, 3, 4, 5], weights=[5, 10, 15, 35, 35])[0]

    record = {
        "feedback_id": f"SOUSCR-{i:05d}",
        "client_id": f"CLI-{random.randint(10000, 99999)}",
        "date_feedback": date_feedback.strftime("%Y-%m-%d"),
        "type_contrat": random.choice(types_contrat),
        "canal": random.choice(canaux_souscription),
        "note_globale": note_globale,
        "clarte_informations": max(1, min(5, note_globale + random.randint(-1, 1))),
        "facilite_processus": max(1, min(5, note_globale + random.randint(-1, 1))),
        "temps_traitement": max(1, min(5, note_globale + random.randint(-1, 1))),
        "qualite_accompagnement": max(1, min(5, note_globale + random.randint(-1, 1))),
        "rapport_qualite_prix": max(1, min(5, note_globale + random.randint(-1, 1))),
        "commentaire": random.choice(commentaires_positifs_souscription if note_globale >= 4 else commentaires_negatifs_souscription),
        "recommanderait": "Oui" if note_globale >= 4 else ("Non" if note_globale <= 2 else "Peut-√™tre")
    }
    souscriptions.append(record)

with open('data/myfeelback_souscriptions.csv', 'w', newline='', encoding='utf-8') as f:
    writer = csv.DictWriter(f, fieldnames=souscriptions[0].keys())
    writer.writeheader()
    writer.writerows(souscriptions)

print("‚úÖ myfeelback_souscriptions.csv g√©n√©r√©")

# ============================================================================
# 4. FEEDBACK SERVICE CLIENT
# ============================================================================

motifs_contact = [
    "Question sur contrat", "Modification de contrat", "R√©siliation",
    "Probl√®me de paiement", "Demande d'attestation", "Information sur garanties",
    "R√©clamation", "D√©claration de sinistre", "Suivi de dossier",
    "Demande de devis", "Question technique app/site", "Renouvellement"
]

canaux_contact = ["T√©l√©phone", "Email", "Chat en ligne", "Application mobile", "Agence", "Formulaire web"]

service_client = []
for i in range(1, nb_records + 1):
    random_days = random.randint(0, 180)
    date_feedback = start_date + timedelta(days=random_days)
    note_globale = random.choices([1, 2, 3, 4, 5], weights=[8, 12, 20, 35, 25])[0]

    commentaires_positifs = [
        "Conseiller tr√®s efficace et sympathique", "R√©ponse rapide et pr√©cise",
        "Probl√®me r√©solu imm√©diatement", "Tr√®s bonne √©coute", "Conseiller comp√©tent",
        "Prise en charge rapide", "Explications claires", "Service de qualit√©",
        "Disponibilit√© appr√©ci√©e", "Professionnel et courtois"
    ]

    commentaires_negatifs = [
        "Temps d'attente beaucoup trop long", "Probl√®me non r√©solu",
        "Conseiller pas assez inform√©", "Pas de rappel comme promis", "R√©ponse √©vasive",
        "Manque d'empathie", "Transf√©r√© plusieurs fois", "Information contradictoire",
        "Toujours en attente de solution", "Service d√©cevant"
    ]

    record = {
        "feedback_id": f"SVCLI-{i:05d}",
        "client_id": f"CLI-{random.randint(10000, 99999)}",
        "date_feedback": date_feedback.strftime("%Y-%m-%d"),
        "motif_contact": random.choice(motifs_contact),
        "canal": random.choice(canaux_contact),
        "temps_attente": random.choice(["< 2 min", "2-5 min", "5-10 min", "10-20 min", "> 20 min"]),
        "temps_resolution": random.choice(["Imm√©diat", "< 24h", "1-3 jours", "3-7 jours", "> 7 jours"]),
        "note_globale": note_globale,
        "note_rapidite": max(1, min(5, note_globale + random.randint(-1, 1))),
        "note_competence": max(1, min(5, note_globale + random.randint(-1, 1))),
        "note_amabilite": max(1, min(5, note_globale + random.randint(-1, 1))),
        "probleme_resolu": "Oui" if note_globale >= 4 else ("Non" if note_globale <= 2 else "Partiellement"),
        "commentaire": random.choice(commentaires_positifs if note_globale >= 4 else commentaires_negatifs)
    }
    service_client.append(record)

with open('data/myfeelback_service_client.csv', 'w', newline='', encoding='utf-8') as f:
    writer = csv.DictWriter(f, fieldnames=service_client[0].keys())
    writer.writeheader()
    writer.writerows(service_client)

print("‚úÖ myfeelback_service_client.csv g√©n√©r√©")

# ============================================================================
# 5. FEEDBACK APPLICATION MOBILE
# ============================================================================

fonctionnalites = [
    "Consultation de contrats", "D√©claration de sinistre", "Demande d'attestation",
    "Paiement", "Chat avec conseiller", "Gestion de profil",
    "Notification", "Espace documentaire", "Simulation de devis", "Suivi de remboursement"
]

versions_app = ["iOS 2.4.1", "iOS 2.4.0", "iOS 2.3.5", "Android 2.4.1", "Android 2.4.0", "Android 2.3.5"]
types_feedback = ["Bug signal√©", "Suggestion d'am√©lioration", "Appr√©ciation positive", "Difficult√© d'utilisation"]

app_mobile = []
for i in range(1, nb_records + 1):
    random_days = random.randint(0, 180)
    date_feedback = start_date + timedelta(days=random_days)
    note_globale = random.choices([1, 2, 3, 4, 5], weights=[10, 15, 25, 30, 20])[0]

    bugs = ["L'application se ferme lors du paiement", "Impossible de t√©l√©charger les attestations",
            "Notifications qui ne s'affichent pas", "Probl√®me de connexion r√©current"]
    suggestions = ["Ajouter Touch ID/Face ID", "Am√©liorer l'ergonomie", "Ajouter mode sombre"]
    appreciations = ["Application tr√®s pratique", "Interface claire et intuitive", "Facile √† utiliser"]
    difficultes = ["Trop complexe pour d√©clarer un sinistre", "Menu pas intuitif"]

    type_fb = random.choice(types_feedback)
    if type_fb == "Bug signal√©":
        commentaire = random.choice(bugs)
    elif type_fb == "Suggestion d'am√©lioration":
        commentaire = random.choice(suggestions)
    elif type_fb == "Appr√©ciation positive":
        commentaire = random.choice(appreciations)
    else:
        commentaire = random.choice(difficultes)

    record = {
        "feedback_id": f"APPMOB-{i:05d}",
        "client_id": f"CLI-{random.randint(10000, 99999)}",
        "date_feedback": date_feedback.strftime("%Y-%m-%d %H:%M:%S"),
        "version_app": random.choice(versions_app),
        "fonctionnalite": random.choice(fonctionnalites),
        "type_feedback": type_fb,
        "note_globale": note_globale,
        "note_facilite": max(1, min(5, note_globale + random.randint(-1, 1))),
        "note_design": max(1, min(5, note_globale + random.randint(-1, 1))),
        "note_performance": max(1, min(5, note_globale + random.randint(-1, 1))),
        "commentaire": commentaire
    }
    app_mobile.append(record)

with open('data/myfeelback_app_mobile.csv', 'w', newline='', encoding='utf-8') as f:
    writer = csv.DictWriter(f, fieldnames=app_mobile[0].keys())
    writer.writeheader()
    writer.writerows(app_mobile)

print("‚úÖ myfeelback_app_mobile.csv g√©n√©r√©")

# ============================================================================
# 6. FEEDBACK NPS (Net Promoter Score)
# ============================================================================

profils_client = [
    "Client depuis < 1 an", "Client depuis 1-3 ans", "Client depuis 3-5 ans",
    "Client depuis 5-10 ans", "Client depuis > 10 ans"
]

nb_contrats_ranges = ["1 contrat", "2 contrats", "3 contrats", "4+ contrats"]

raisons_detracteurs = [
    "Tarifs trop √©lev√©s", "Service client d√©cevant", "Remboursements insuffisants",
    "Trop de complications administratives", "Manque de transparence"
]

raisons_passifs = [
    "Satisfait sans plus", "Prix corrects mais pas les meilleurs",
    "Service correct mais am√©liorable", "Pas de probl√®me majeur"
]

raisons_promoteurs = [
    "Excellent rapport qualit√©/prix", "Conseiller toujours disponible et efficace",
    "Remboursements rapides et sans souci", "Confiance totale", "Service client irr√©prochable"
]

nps_data = []
for i in range(1, nb_records + 1):
    random_days = random.randint(0, 180)
    date_feedback = start_date + timedelta(days=random_days)
    nps_score = random.choices(range(0, 11), weights=[3, 3, 4, 5, 6, 7, 8, 10, 15, 20, 19])[0]

    if nps_score <= 6:
        categorie = "D√©tracteur"
        raison = random.choice(raisons_detracteurs)
    elif nps_score <= 8:
        categorie = "Passif"
        raison = random.choice(raisons_passifs)
    else:
        categorie = "Promoteur"
        raison = random.choice(raisons_promoteurs)

    record = {
        "feedback_id": f"NPS-{i:05d}",
        "client_id": f"CLI-{random.randint(10000, 99999)}",
        "date_feedback": date_feedback.strftime("%Y-%m-%d"),
        "nps_score": nps_score,
        "categorie": categorie,
        "profil_client": random.choice(profils_client),
        "nb_contrats": random.choice(nb_contrats_ranges),
        "a_eu_sinistre": random.choice(["Oui", "Non"]),
        "a_contacte_service_client": random.choice(["Oui", "Non"]),
        "utilise_app_mobile": random.choice(["Oui", "Non"]),
        "commentaire": raison
    }
    nps_data.append(record)

with open('data/myfeelback_nps.csv', 'w', newline='', encoding='utf-8') as f:
    writer = csv.DictWriter(f, fieldnames=nps_data[0].keys())
    writer.writeheader()
    writer.writerows(nps_data)

print("‚úÖ myfeelback_nps.csv g√©n√©r√©")

# ============================================================================
# 7. FEEDBACK AGENCES
# ============================================================================

agences = [
    "Luxembourg-Centre", "Luxembourg-Gare", "Esch-sur-Alzette", "Differdange",
    "Dudelange", "Ettelbruck", "Diekirch", "Wiltz", "Remich", "Grevenmacher"
]

motifs_visite = [
    "Souscription nouveau contrat", "Modification de contrat", "R√©siliation",
    "Question/conseil", "D√©claration sinistre", "R√©clamation",
    "Rendez-vous conseiller", "Retrait de documents", "Paiement", "Demande d'information"
]

agences_feedback = []
for i in range(1, nb_records + 1):
    random_days = random.randint(0, 180)
    date_feedback = start_date + timedelta(days=random_days)
    note_globale = random.choices([1, 2, 3, 4, 5], weights=[5, 8, 15, 40, 32])[0]

    commentaires_positifs = [
        "Accueil chaleureux", "Conseiller tr√®s professionnel", "Pas d'attente, service rapide",
        "Agence bien situ√©e et accueillante", "Personnel comp√©tent et √† l'√©coute"
    ]

    commentaires_negatifs = [
        "Temps d'attente excessif", "Agence trop petite, manque de place",
        "Conseiller press√©", "Parking difficile", "Horaires d'ouverture contraignants"
    ]

    record = {
        "feedback_id": f"AGENCE-{i:05d}",
        "client_id": f"CLI-{random.randint(10000, 99999)}",
        "date_feedback": date_feedback.strftime("%Y-%m-%d"),
        "agence": random.choice(agences),
        "motif_visite": random.choice(motifs_visite),
        "avec_rendez_vous": random.choice(["Oui", "Non"]),
        "temps_attente": random.choice(["< 5 min", "5-10 min", "10-15 min", "15-30 min", "> 30 min"]),
        "note_globale": note_globale,
        "note_accueil": max(1, min(5, note_globale + random.randint(-1, 1))),
        "note_competence_conseiller": max(1, min(5, note_globale + random.randint(-1, 1))),
        "note_proprete_locaux": max(1, min(5, note_globale + random.randint(-1, 0))),
        "note_accessibilite": max(1, min(5, note_globale + random.randint(-1, 0))),
        "reviendrait": "Oui" if note_globale >= 4 else ("Non" if note_globale <= 2 else "Peut-√™tre"),
        "commentaire": random.choice(commentaires_positifs if note_globale >= 4 else commentaires_negatifs)
    }
    agences_feedback.append(record)

with open('data/myfeelback_agences.csv', 'w', newline='', encoding='utf-8') as f:
    writer = csv.DictWriter(f, fieldnames=agences_feedback[0].keys())
    writer.writeheader()
    writer.writerows(agences_feedback)

print("‚úÖ myfeelback_agences.csv g√©n√©r√©")

# ============================================================================
# STATISTIQUES GLOBALES
# ============================================================================

print("\n" + "="*60)
print("üìä R√âSUM√â DE G√âN√âRATION")
print("="*60)
print(f"‚úÖ 7 fichiers CSV g√©n√©r√©s avec {nb_records} enregistrements chacun")
print(f"üìÖ P√©riode: {start_date.strftime('%Y-%m-%d')} √† {datetime.now().strftime('%Y-%m-%d')}")
print("\nüìÅ Fichiers cr√©√©s:")
print("   1. tickets_jira.csv - Tickets IT internes")
print("   2. myfeelback_remboursements.csv - Sinistres et remboursements")
print("   3. myfeelback_souscriptions.csv - Feedback apr√®s souscription")
print("   4. myfeelback_service_client.csv - Satisfaction service client")
print("   5. myfeelback_app_mobile.csv - Retours application mobile")
print("   6. myfeelback_nps.csv - Net Promoter Score")
print("   7. myfeelback_agences.csv - Satisfaction visites en agence")

# Calcul NPS
detracteurs = sum(1 for r in nps_data if r['categorie'] == 'D√©tracteur')
promoteurs = sum(1 for r in nps_data if r['categorie'] == 'Promoteur')
nps = ((promoteurs - detracteurs) / len(nps_data)) * 100

print(f"\nüìà NPS Score: {nps:.1f}")
print(f"   - Promoteurs: {promoteurs} ({promoteurs/len(nps_data)*100:.1f}%)")
print(f"   - Passifs: {len(nps_data)-promoteurs-detracteurs} ({(len(nps_data)-promoteurs-detracteurs)/len(nps_data)*100:.1f}%)")
print(f"   - D√©tracteurs: {detracteurs} ({detracteurs/len(nps_data)*100:.1f}%)")

# Stats moyennes
avg_souscription = sum(r['note_globale'] for r in souscriptions) / len(souscriptions)
avg_service = sum(r['note_globale'] for r in service_client) / len(service_client)
avg_app = sum(r['note_globale'] for r in app_mobile) / len(app_mobile)
avg_agence = sum(r['note_globale'] for r in agences_feedback) / len(agences_feedback)

total_reclame = sum(float(r['montant_reclame']) for r in remboursements)
total_rembourse = sum(float(r['montant_rembourse']) for r in remboursements)

print(f"\n‚≠ê Notes moyennes:")
print(f"   - Souscriptions: {avg_souscription:.2f}/5")
print(f"   - Service client: {avg_service:.2f}/5")
print(f"   - Application mobile: {avg_app:.2f}/5")
print(f"   - Agences: {avg_agence:.2f}/5")

print(f"\nüí∞ Remboursements:")
print(f"   - Montant r√©clam√©: {total_reclame:,.2f} ‚Ç¨")
print(f"   - Montant rembours√©: {total_rembourse:,.2f} ‚Ç¨")
print(f"   - Taux de remboursement: {(total_rembourse/total_reclame*100):.1f}%")
print("="*60)
